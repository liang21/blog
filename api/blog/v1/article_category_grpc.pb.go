// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/blog/v1/article_category.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticleCategoryService_CreateArticleCategory_FullMethodName = "/api.blog.v1.ArticleCategoryService/CreateArticleCategory"
	ArticleCategoryService_UpdateArticleCategory_FullMethodName = "/api.blog.v1.ArticleCategoryService/UpdateArticleCategory"
	ArticleCategoryService_DeleteArticleCategory_FullMethodName = "/api.blog.v1.ArticleCategoryService/DeleteArticleCategory"
	ArticleCategoryService_GetArticleCategory_FullMethodName    = "/api.blog.v1.ArticleCategoryService/GetArticleCategory"
)

// ArticleCategoryServiceClient is the client API for ArticleCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleCategoryServiceClient interface {
	CreateArticleCategory(ctx context.Context, in *CreateArticleCategoryRequest, opts ...grpc.CallOption) (*ArticleCategory, error)
	UpdateArticleCategory(ctx context.Context, in *UpdateArticleCategoryRequest, opts ...grpc.CallOption) (*ArticleCategory, error)
	DeleteArticleCategory(ctx context.Context, in *DeleteArticleCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetArticleCategory(ctx context.Context, in *GetArticleCategoryRequest, opts ...grpc.CallOption) (*ArticleCategory, error)
}

type articleCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleCategoryServiceClient(cc grpc.ClientConnInterface) ArticleCategoryServiceClient {
	return &articleCategoryServiceClient{cc}
}

func (c *articleCategoryServiceClient) CreateArticleCategory(ctx context.Context, in *CreateArticleCategoryRequest, opts ...grpc.CallOption) (*ArticleCategory, error) {
	out := new(ArticleCategory)
	err := c.cc.Invoke(ctx, ArticleCategoryService_CreateArticleCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleCategoryServiceClient) UpdateArticleCategory(ctx context.Context, in *UpdateArticleCategoryRequest, opts ...grpc.CallOption) (*ArticleCategory, error) {
	out := new(ArticleCategory)
	err := c.cc.Invoke(ctx, ArticleCategoryService_UpdateArticleCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleCategoryServiceClient) DeleteArticleCategory(ctx context.Context, in *DeleteArticleCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArticleCategoryService_DeleteArticleCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleCategoryServiceClient) GetArticleCategory(ctx context.Context, in *GetArticleCategoryRequest, opts ...grpc.CallOption) (*ArticleCategory, error) {
	out := new(ArticleCategory)
	err := c.cc.Invoke(ctx, ArticleCategoryService_GetArticleCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleCategoryServiceServer is the server API for ArticleCategoryService service.
// All implementations must embed UnimplementedArticleCategoryServiceServer
// for forward compatibility
type ArticleCategoryServiceServer interface {
	CreateArticleCategory(context.Context, *CreateArticleCategoryRequest) (*ArticleCategory, error)
	UpdateArticleCategory(context.Context, *UpdateArticleCategoryRequest) (*ArticleCategory, error)
	DeleteArticleCategory(context.Context, *DeleteArticleCategoryRequest) (*emptypb.Empty, error)
	GetArticleCategory(context.Context, *GetArticleCategoryRequest) (*ArticleCategory, error)
	mustEmbedUnimplementedArticleCategoryServiceServer()
}

// UnimplementedArticleCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleCategoryServiceServer struct {
}

func (UnimplementedArticleCategoryServiceServer) CreateArticleCategory(context.Context, *CreateArticleCategoryRequest) (*ArticleCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleCategory not implemented")
}
func (UnimplementedArticleCategoryServiceServer) UpdateArticleCategory(context.Context, *UpdateArticleCategoryRequest) (*ArticleCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticleCategory not implemented")
}
func (UnimplementedArticleCategoryServiceServer) DeleteArticleCategory(context.Context, *DeleteArticleCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleCategory not implemented")
}
func (UnimplementedArticleCategoryServiceServer) GetArticleCategory(context.Context, *GetArticleCategoryRequest) (*ArticleCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleCategory not implemented")
}
func (UnimplementedArticleCategoryServiceServer) mustEmbedUnimplementedArticleCategoryServiceServer() {
}

// UnsafeArticleCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleCategoryServiceServer will
// result in compilation errors.
type UnsafeArticleCategoryServiceServer interface {
	mustEmbedUnimplementedArticleCategoryServiceServer()
}

func RegisterArticleCategoryServiceServer(s grpc.ServiceRegistrar, srv ArticleCategoryServiceServer) {
	s.RegisterService(&ArticleCategoryService_ServiceDesc, srv)
}

func _ArticleCategoryService_CreateArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleCategoryServiceServer).CreateArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleCategoryService_CreateArticleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleCategoryServiceServer).CreateArticleCategory(ctx, req.(*CreateArticleCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleCategoryService_UpdateArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleCategoryServiceServer).UpdateArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleCategoryService_UpdateArticleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleCategoryServiceServer).UpdateArticleCategory(ctx, req.(*UpdateArticleCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleCategoryService_DeleteArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleCategoryServiceServer).DeleteArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleCategoryService_DeleteArticleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleCategoryServiceServer).DeleteArticleCategory(ctx, req.(*DeleteArticleCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleCategoryService_GetArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleCategoryServiceServer).GetArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleCategoryService_GetArticleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleCategoryServiceServer).GetArticleCategory(ctx, req.(*GetArticleCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleCategoryService_ServiceDesc is the grpc.ServiceDesc for ArticleCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.blog.v1.ArticleCategoryService",
	HandlerType: (*ArticleCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticleCategory",
			Handler:    _ArticleCategoryService_CreateArticleCategory_Handler,
		},
		{
			MethodName: "UpdateArticleCategory",
			Handler:    _ArticleCategoryService_UpdateArticleCategory_Handler,
		},
		{
			MethodName: "DeleteArticleCategory",
			Handler:    _ArticleCategoryService_DeleteArticleCategory_Handler,
		},
		{
			MethodName: "GetArticleCategory",
			Handler:    _ArticleCategoryService_GetArticleCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/blog/v1/article_category.proto",
}
