// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/blog/v1/article_category.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ArticleCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ArticleCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleCategoryMultiError, or nil if none found.
func (m *ArticleCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ArticleId

	// no validation rules for CategoryId

	if all {
		switch v := interface{}(m.GetCreateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArticleCategoryValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArticleCategoryValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArticleCategoryValidationError{
				field:  "CreateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArticleCategoryValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArticleCategoryValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArticleCategoryValidationError{
				field:  "UpdateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ArticleCategoryMultiError(errors)
	}

	return nil
}

// ArticleCategoryMultiError is an error wrapping multiple validation errors
// returned by ArticleCategory.ValidateAll() if the designated constraints
// aren't met.
type ArticleCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleCategoryMultiError) AllErrors() []error { return m }

// ArticleCategoryValidationError is the validation error returned by
// ArticleCategory.Validate if the designated constraints aren't met.
type ArticleCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleCategoryValidationError) ErrorName() string { return "ArticleCategoryValidationError" }

// Error satisfies the builtin error interface
func (e ArticleCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleCategoryValidationError{}

// Validate checks the field values on CreateArticleCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleCategoryRequestMultiError, or nil if none found.
func (m *CreateArticleCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return CreateArticleCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateArticleCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateArticleCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateArticleCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleCategoryRequestMultiError) AllErrors() []error { return m }

// CreateArticleCategoryRequestValidationError is the validation error returned
// by CreateArticleCategoryRequest.Validate if the designated constraints
// aren't met.
type CreateArticleCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleCategoryRequestValidationError) ErrorName() string {
	return "CreateArticleCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleCategoryRequestValidationError{}

// Validate checks the field values on UpdateArticleCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleCategoryRequestMultiError, or nil if none found.
func (m *UpdateArticleCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ArticleId

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return UpdateArticleCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateArticleCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateArticleCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateArticleCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateArticleCategoryRequestValidationError is the validation error returned
// by UpdateArticleCategoryRequest.Validate if the designated constraints
// aren't met.
type UpdateArticleCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleCategoryRequestValidationError) ErrorName() string {
	return "UpdateArticleCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArticleCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleCategoryRequestValidationError{}

// Validate checks the field values on DeleteArticleCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleCategoryRequestMultiError, or nil if none found.
func (m *DeleteArticleCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteArticleCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteArticleCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteArticleCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteArticleCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteArticleCategoryRequestValidationError is the validation error returned
// by DeleteArticleCategoryRequest.Validate if the designated constraints
// aren't met.
type DeleteArticleCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleCategoryRequestValidationError) ErrorName() string {
	return "DeleteArticleCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArticleCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleCategoryRequestValidationError{}

// Validate checks the field values on GetArticleCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleCategoryRequestMultiError, or nil if none found.
func (m *GetArticleCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return GetArticleCategoryRequestMultiError(errors)
	}

	return nil
}

// GetArticleCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetArticleCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetArticleCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleCategoryRequestMultiError) AllErrors() []error { return m }

// GetArticleCategoryRequestValidationError is the validation error returned by
// GetArticleCategoryRequest.Validate if the designated constraints aren't met.
type GetArticleCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleCategoryRequestValidationError) ErrorName() string {
	return "GetArticleCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleCategoryRequestValidationError{}
